symbol('<global namespace>', 'Namespace', '', '', '');
symbol('UIDemo', 'Namespace', 'test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null', '', '<global namespace>');
symbol('UIDemo.UICommon<CT>', 'NamedType', 'test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null', '', 'UIDemo');
symbol('UIDemo.UICommon<CT>.StaticCreateCustomComponent<T>(string, UnityEngine.Transform)', 'Method', 'test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null', 'UIDemo.UICommon<CT>', 'UIDemo');
symbol('UIDemo.UICommon<CT>.CreateCustomComponent<T>(string, UnityEngine.Transform)', 'Method', 'test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null', 'UIDemo.UICommon<CT>', 'UIDemo');
symbol('TopLevel', 'Namespace', 'test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null', '', '<global namespace>');
symbol('TopLevel.SecondLevel', 'Namespace', 'test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null', '', 'TopLevel');
symbol('TopLevel.SecondLevel.GenericClass<T>', 'NamedType', 'test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null', '', 'TopLevel.SecondLevel');
symbol('TopLevel.SecondLevel.GenericClass<T>.TTT', 'Field', 'test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null', 'TopLevel.SecondLevel.GenericClass<T>', 'TopLevel.SecondLevel');
symbol('TopLevel.SecondLevel.GenericClass<T>.Test<G>()', 'Method', 'test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null', 'TopLevel.SecondLevel.GenericClass<T>', 'TopLevel.SecondLevel');
symbol('TopLevel.SecondLevel.GenericClass<T>.m_Test', 'Field', 'test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null', 'TopLevel.SecondLevel.GenericClass<T>', 'TopLevel.SecondLevel');
symbol('TopLevel.SecondLevel.GenericClass<T>.m_Test2', 'Field', 'test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null', 'TopLevel.SecondLevel.GenericClass<T>', 'TopLevel.SecondLevel');
symbol('TopLevel.SecondLevel.GenericClass<T>.m_Inst', 'Field', 'test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null', 'TopLevel.SecondLevel.GenericClass<T>', 'TopLevel.SecondLevel');
symbol('TopLevel.SecondLevel.GenericClass<T>.s_Test', 'Field', 'test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null', 'TopLevel.SecondLevel.GenericClass<T>', 'TopLevel.SecondLevel');
symbol('TopLevel.SecondLevel.GenericClass<T>.s_Float', 'Field', 'test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null', 'TopLevel.SecondLevel.GenericClass<T>', 'TopLevel.SecondLevel');
symbol('TopLevel.SecondLevel.GenericClass<T>.s_Inst', 'Field', 'test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null', 'TopLevel.SecondLevel.GenericClass<T>', 'TopLevel.SecondLevel');
symbol('TopLevel.SecondLevel.GenericClass<T>.InnerGenericClass<TT>', 'NamedType', 'test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null', 'TopLevel.SecondLevel.GenericClass<T>', 'TopLevel.SecondLevel');
symbol('TopLevel.SecondLevel.GenericClass<T>.InnerGenericClass<TT>.Test<G>(G)', 'Method', 'test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null', 'TopLevel.SecondLevel.GenericClass<T>.InnerGenericClass<TT>', 'TopLevel.SecondLevel');
symbol('TopLevel.SecondLevel.GenericClass<T>.InnerGenericClass<TT>.Test2<GG>(T, TT)', 'Method', 'test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null', 'TopLevel.SecondLevel.GenericClass<T>.InnerGenericClass<TT>', 'TopLevel.SecondLevel');
symbol('TopLevel.SecondLevel.GenericClass<T>.InnerGenericClass<TT>.m_T', 'Field', 'test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null', 'TopLevel.SecondLevel.GenericClass<T>.InnerGenericClass<TT>', 'TopLevel.SecondLevel');
symbol('TopLevel.SecondLevel.GenericClass<T>.InnerGenericClass<TT>.m_TT', 'Field', 'test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null', 'TopLevel.SecondLevel.GenericClass<T>.InnerGenericClass<TT>', 'TopLevel.SecondLevel');
symbol('TopLevel.SecondLevel.GenericClass<T>.InnerGenericClass<TT>.m_TypeT', 'Field', 'test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null', 'TopLevel.SecondLevel.GenericClass<T>.InnerGenericClass<TT>', 'TopLevel.SecondLevel');
symbol('TopLevel.SecondLevel.GenericClass<T>.InnerGenericClass<TT>.m_TypeTT', 'Field', 'test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null', 'TopLevel.SecondLevel.GenericClass<T>.InnerGenericClass<TT>', 'TopLevel.SecondLevel');
symbol('TopLevel.SecondLevel.SimpleEventHandler', 'NamedType', 'test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null', '', 'TopLevel.SecondLevel');
symbol('TopLevel.SecondLevel.SimpleEventHandler.Invoke()', 'Method', 'test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null', 'TopLevel.SecondLevel.SimpleEventHandler', 'TopLevel.SecondLevel');
symbol('TopLevel.SecondLevel.SimpleEventHandler.BeginInvoke(System.AsyncCallback, object)', 'Method', 'test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null', 'TopLevel.SecondLevel.SimpleEventHandler', 'TopLevel.SecondLevel');
symbol('TopLevel.SecondLevel.SimpleEventHandler.EndInvoke(System.IAsyncResult)', 'Method', 'test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null', 'TopLevel.SecondLevel.SimpleEventHandler', 'TopLevel.SecondLevel');
symbol('TopLevel.SecondLevel.FooBase', 'NamedType', 'test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null', '', 'TopLevel.SecondLevel');
symbol('TopLevel.SecondLevel.FooBase.m_Ttt', 'Field', 'test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null', 'TopLevel.SecondLevel.FooBase', 'TopLevel.SecondLevel');
symbol('TopLevel.SecondLevel.Foo', 'NamedType', 'test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null', '', 'TopLevel.SecondLevel');
symbol('TopLevel.SecondLevel.Foo.OnSimple', 'Event', 'test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null', 'TopLevel.SecondLevel.Foo', 'TopLevel.SecondLevel');
symbol('TopLevel.SecondLevel.Foo.OnSimple2', 'Field', 'test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null', 'TopLevel.SecondLevel.Foo', 'TopLevel.SecondLevel');
symbol('TopLevel.SecondLevel.Foo.EventBridge', 'Event', 'test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null', 'TopLevel.SecondLevel.Foo', 'TopLevel.SecondLevel');
symbol('TopLevel.SecondLevel.Foo.StaticEventBridge', 'Event', 'test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null', 'TopLevel.SecondLevel.Foo', 'TopLevel.SecondLevel');
symbol('TopLevel.SecondLevel.Foo.Val', 'Property', 'test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null', 'TopLevel.SecondLevel.Foo', 'TopLevel.SecondLevel');
symbol('TopLevel.SecondLevel.Foo.this[params TopLevel.TestStruct[]]', 'Property', 'test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null', 'TopLevel.SecondLevel.Foo', 'TopLevel.SecondLevel');
symbol('TopLevel.SecondLevel.Foo.Test123(int, float)', 'Method', 'test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null', 'TopLevel.SecondLevel.Foo', 'TopLevel.SecondLevel');
symbol('TopLevel.SecondLevel.Foo.GTest(TopLevel.SecondLevel.GenericClass<int>)', 'Method', 'test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null', 'TopLevel.SecondLevel.Foo', 'TopLevel.SecondLevel');
symbol('TopLevel.SecondLevel.Foo.GTest(TopLevel.SecondLevel.GenericClass<float>)', 'Method', 'test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null', 'TopLevel.SecondLevel.Foo', 'TopLevel.SecondLevel');
symbol('TopLevel.SecondLevel.Foo.Iterator()', 'Method', 'test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null', 'TopLevel.SecondLevel.Foo', 'TopLevel.SecondLevel');
symbol('TopLevel.SecondLevel.Foo.Iterator2()', 'Method', 'test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null', 'TopLevel.SecondLevel.Foo', 'TopLevel.SecondLevel');
symbol('TopLevel.SecondLevel.Foo.Test()', 'Method', 'test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null', 'TopLevel.SecondLevel.Foo', 'TopLevel.SecondLevel');
symbol('TopLevel.SecondLevel.Foo.TestLocal(out int)', 'Method', 'test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null', 'TopLevel.SecondLevel.Foo', 'TopLevel.SecondLevel');
symbol('TopLevel.SecondLevel.Foo.TestValueArg(TopLevel.TestStruct)', 'Method', 'test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null', 'TopLevel.SecondLevel.Foo', 'TopLevel.SecondLevel');
symbol('TopLevel.SecondLevel.Foo.TestContinueAndReturn()', 'Method', 'test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null', 'TopLevel.SecondLevel.Foo', 'TopLevel.SecondLevel');
symbol('TopLevel.SecondLevel.Foo.TestSwitch()', 'Method', 'test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null', 'TopLevel.SecondLevel.Foo', 'TopLevel.SecondLevel');
symbol('TopLevel.SecondLevel.Foo.m_Test', 'Field', 'test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null', 'TopLevel.SecondLevel.Foo', 'TopLevel.SecondLevel');
symbol('TopLevel.SecondLevel.Foo.m_Test2', 'Field', 'test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null', 'TopLevel.SecondLevel.Foo', 'TopLevel.SecondLevel');
symbol('TopLevel.SecondLevel.Foo.m_TS', 'Field', 'test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null', 'TopLevel.SecondLevel.Foo', 'TopLevel.SecondLevel');
symbol('TopLevel.SecondLevel.Foo.m_HashSet', 'Field', 'test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null', 'TopLevel.SecondLevel.Foo', 'TopLevel.SecondLevel');
symbol('TopLevel.SecondLevel.Foo.Test1', 'NamedType', 'test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null', 'TopLevel.SecondLevel.Foo', 'TopLevel.SecondLevel');
symbol('TopLevel.SecondLevel.Foo.Test2', 'NamedType', 'test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null', 'TopLevel.SecondLevel.Foo', 'TopLevel.SecondLevel');
symbol('TopLevel.SecondLevel.Foo.FooChild', 'NamedType', 'test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null', 'TopLevel.SecondLevel.Foo', 'TopLevel.SecondLevel');
symbol('TopLevel.SecondLevel.Foo.FooChild.m_Test1', 'Field', 'test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null', 'TopLevel.SecondLevel.Foo.FooChild', 'TopLevel.SecondLevel');
symbol('TopLevel.SecondLevel.Foo.FooChild.m_Test2', 'Field', 'test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null', 'TopLevel.SecondLevel.Foo.FooChild', 'TopLevel.SecondLevel');
symbol('TopLevel.SecondLevel.FooExtension', 'NamedType', 'test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null', '', 'TopLevel.SecondLevel');
symbol('TopLevel.SecondLevel.FooExtension.Test3(TopLevel.SecondLevel.Foo)', 'Method', 'test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null', 'TopLevel.SecondLevel.FooExtension', 'TopLevel.SecondLevel');
symbol('TopLevel.SecondLevel.FooExtension.Test3(TopLevel.SecondLevel.Foo, int)', 'Method', 'test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null', 'TopLevel.SecondLevel.FooExtension', 'TopLevel.SecondLevel');
symbol('TopLevel.SecondLevel.FooExtension.TestExtern(UnityEngine.GameObject)', 'Method', 'test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null', 'TopLevel.SecondLevel.FooExtension', 'TopLevel.SecondLevel');
symbol('TopLevel.SecondLevel.FooExtension.NormalMethod()', 'Method', 'test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null', 'TopLevel.SecondLevel.FooExtension', 'TopLevel.SecondLevel');
symbol('TopLevel.TestEnum', 'NamedType', 'test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null', '', 'TopLevel');
symbol('TopLevel.TestEnum.Invalid', 'Field', 'test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null', 'TopLevel.TestEnum', 'TopLevel');
symbol('TopLevel.TestEnum.One', 'Field', 'test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null', 'TopLevel.TestEnum', 'TopLevel');
symbol('TopLevel.TestEnum.Two', 'Field', 'test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null', 'TopLevel.TestEnum', 'TopLevel');
symbol('TopLevel.TestEnum.Three', 'Field', 'test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null', 'TopLevel.TestEnum', 'TopLevel');
symbol('TopLevel.TestEnum.Four', 'Field', 'test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null', 'TopLevel.TestEnum', 'TopLevel');
symbol('TopLevel.TestStruct', 'NamedType', 'test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null', '', 'TopLevel');
symbol('TopLevel.TestStruct.A', 'Field', 'test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null', 'TopLevel.TestStruct', 'TopLevel');
symbol('TopLevel.TestStruct.B', 'Field', 'test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null', 'TopLevel.TestStruct', 'TopLevel');
symbol('TopLevel.TestStruct.C', 'Field', 'test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null', 'TopLevel.TestStruct', 'TopLevel');
symbol('TopLevel.IRunnable0', 'NamedType', 'test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null', '', 'TopLevel');
symbol('TopLevel.IRunnable0.Test()', 'Method', 'test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null', 'TopLevel.IRunnable0', 'TopLevel');
symbol('TopLevel.IRunnable<T>', 'NamedType', 'test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null', '', 'TopLevel');
symbol('TopLevel.IRunnable<T>.Test2()', 'Method', 'test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null', 'TopLevel.IRunnable<T>', 'TopLevel');
symbol('TopLevel.IRunnable<T>.this[int]', 'Property', 'test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null', 'TopLevel.IRunnable<T>', 'TopLevel');
symbol('TopLevel.IRunnable<T>.TestProp', 'Property', 'test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null', 'TopLevel.IRunnable<T>', 'TopLevel');
symbol('TopLevel.IRunnable<T>.OnAction', 'Event', 'test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null', 'TopLevel.IRunnable<T>', 'TopLevel');
symbol('TopLevel.Runnable', 'NamedType', 'test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null', '', 'TopLevel');
symbol('TopLevel.Runnable.TopLevel.IRunnable0.Test()', 'Method', 'test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null', 'TopLevel.Runnable', 'TopLevel');
symbol('TopLevel.Runnable.TopLevel.IRunnable<int>.TestProp', 'Property', 'test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null', 'TopLevel.Runnable', 'TopLevel');
symbol('TopLevel.Runnable.TopLevel.IRunnable<int>.TestProp.get', 'Method', 'test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null', 'TopLevel.Runnable', 'TopLevel');
symbol('TopLevel.Runnable.TopLevel.IRunnable<int>.TestProp.set', 'Method', 'test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null', 'TopLevel.Runnable', 'TopLevel');
symbol('TopLevel.Runnable.this[int]', 'Property', 'test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null', 'TopLevel.Runnable', 'TopLevel');
symbol('TopLevel.Runnable.Test2()', 'Method', 'test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null', 'TopLevel.Runnable', 'TopLevel');
symbol('TopLevel.Runnable.TopLevel.IRunnable<int>.OnAction', 'Event', 'test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null', 'TopLevel.Runnable', 'TopLevel');
symbol('TopLevel.Runnable.TopLevel.IRunnable<int>.OnAction.add', 'Method', 'test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null', 'TopLevel.Runnable', 'TopLevel');
symbol('TopLevel.Runnable.TopLevel.IRunnable<int>.OnAction.remove', 'Method', 'test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null', 'TopLevel.Runnable', 'TopLevel');
symbol('TopLevel.TestRunnable', 'NamedType', 'test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null', '', 'TopLevel');
symbol('TopLevel.TestRunnable.OnDelegation', 'Field', 'test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null', 'TopLevel.TestRunnable', 'TopLevel');
symbol('TopLevel.TestRunnable.Test()', 'Method', 'test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null', 'TopLevel.TestRunnable', 'TopLevel');
symbol('TopLevel.Singleton<T>', 'NamedType', 'test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null', '', 'TopLevel');
symbol('TopLevel.Singleton<T>.ms_instance', 'Field', 'test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null', 'TopLevel.Singleton<T>', 'TopLevel');
symbol('TopLevel.Singleton<T>.instance', 'Property', 'test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null', 'TopLevel.Singleton<T>', 'TopLevel');
symbol('TopLevel.Singleton<T>.Delete()', 'Method', 'test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null', 'TopLevel.Singleton<T>', 'TopLevel');
symbol('LuaConsole', 'NamedType', 'test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null', '', '<global namespace>');
symbol('LuaConsole.Print(params object[])', 'Method', 'test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null', 'LuaConsole', '<global namespace>');
symbol('TestUnity', 'NamedType', 'test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null', '', '<global namespace>');
symbol('TestUnity.Test(params object[])', 'Method', 'test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null', 'TestUnity', '<global namespace>');
symbol('TestUnity.m_TestString', 'Field', 'test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null', 'TestUnity', '<global namespace>');
symbol('foo<T, K>', 'NamedType', 'test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null', '', '<global namespace>');
symbol('foo<T, K>.parse(string, string)', 'Method', 'test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null', 'foo<T, K>', '<global namespace>');
symbol('bar', 'NamedType', 'test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null', '', '<global namespace>');
symbol('bar.test()', 'Method', 'test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null', 'bar', '<global namespace>');
symbol('bar.m_DateTime', 'Field', 'test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null', 'bar', '<global namespace>');
symbol('bar.s_DateTime', 'Field', 'test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null', 'bar', '<global namespace>');
symbol('Extentions', 'NamedType', 'test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null', '', '<global namespace>');
symbol('Extentions.dateTime1970', 'Field', 'test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null', 'Extentions', '<global namespace>');
symbol('Extentions.timeInMillisecond(System.DateTime)', 'Method', 'test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null', 'Extentions', '<global namespace>');
symbol('Extentions.timeSince1970(System.DateTime)', 'Method', 'test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null', 'Extentions', '<global namespace>');
symbol('Extentions.timeSince1970InMillisecond(System.DateTime)', 'Method', 'test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null', 'Extentions', '<global namespace>');
symbol('Extentions.findChildRecursively(UnityEngine.Transform, string, int)', 'Method', 'test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null', 'Extentions', '<global namespace>');
symbol('Extentions.searchChildRecursively(UnityEngine.Transform, string, int)', 'Method', 'test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null', 'Extentions', '<global namespace>');
symbol('Extentions.isFirstTimeToStart()', 'Method', 'test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null', 'Extentions', '<global namespace>');
symbol('Extentions.AddSorted<T>(System.Collections.Generic.List<T>, T)', 'Method', 'test, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null', 'Extentions', '<global namespace>');
