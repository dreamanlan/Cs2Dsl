require "cs2lua__namespaces"; 

TopLevel.TestRunnable = {
	__new_object = function(...)
		return newobject(TopLevel.TestRunnable, nil, nil, "ctor", nil, ...);
	end,
	__define_class = function()
		local static = TopLevel.TestRunnable;
		local static_methods = {
			cctor = function()
				TopLevel.TestRunnable.__cctor();
			end,
			__cctor = function()
				if TopLevel.TestRunnable.__cctor_called then 
					return;
				else
					TopLevel.TestRunnable.__cctor_called = true;
				end;
			end,
		};

		local static_fields_build = function()
			local static_fields = {
				__cctor_called = false,
			};
			return static_fields;
		end;
		local static_props = nil;
		local static_events = nil;

		local instance_methods = {
			Test = function(this)
				local f;
				f = newobject(TopLevel.Runnable, nil, nil, "ctor", nil);
				invokewithinterface(f, "TopLevel_IRunnable0", "Test");
				local i;
				i = f[4];
				f[0] = i;
				setwithinterface(f, "TopLevel_IRunnable_System_Int32", "TestProp", i);
				i = getwithinterface(f,  					TopLevel_IRunnable_System_Int32 					 ,  					TestProp 					 );
				local pow;
				pow = (function(v)
						return invokeintegeroperator(4, "*", v, v, System.Int32, System.Int32);
					end);
				local pow2;
				pow2 = (function(v1, v2)
						return invokeintegeroperator(4, "*", v1, v2, System.Int32, System.Int32);
					end);
				local a;
				a = (function()
						i = invokeintegeroperator(4, "*", i, i, System.Int32, System.Int32);
						LuaConsole.Print(invokeintegeroperator(4, "*", i, 4, System.Int32, System.Int32));
					end);
				f.OnAction = delegationadd(true, false, "TopLevel.IRunnable_System_Int32:OnAction", f, "TopLevel_IRunnable_System_Int32", "OnAction", a);
				f.OnAction = delegationremove(true, false, "TopLevel.IRunnable_System_Int32:OnAction", f, "TopLevel_IRunnable_System_Int32", "OnAction", a);
				this.OnDelegation = delegationadd(false, false, "TopLevel.TestRunnable:OnDelegation", this, nil, "OnDelegation", a);
				local t;
				t = wrapconst(System.Single, "NegativeInfinity");
				t = wrapconst(System.Single, "NaN");
			end,
			ctor = function(this)
				this:__ctor();
			end,
			__ctor = function(this)
				if this.__ctor_called then 
					return;
				else
					this.__ctor_called = true;
				end;
			end,
		};
		local instance_fields_build = function()
			local instance_fields = {
				OnDelegation = __cs2lua_nil_field_value,
				__ctor_called = false,
			};
			return instance_fields;
		end;
		local instance_props = nil;
		local instance_events = nil;

		local interfaces = nil;
		local interface_map = nil;

		local class_info = {
			Kind = TypeKind.Class,
		};
		local method_info = {
			Test = {
				Kind = MethodKind.Ordinary,
			},
			ctor = {
				Kind = MethodKind.Constructor,
			},
		};
		local property_info = nil;
		local event_info = nil;
		local field_info = {
			OnDelegation = {
			},
		};

		Utility.Warn("TopLevel.TestRunnable::__define_class begin");
		local __defineclass_return = defineclass(nil, "TopLevel.TestRunnable", "TestRunnable", static, static_methods, static_fields_build, static_props, static_events, instance_methods, instance_fields_build, instance_props, instance_events, interfaces, interface_map, class_info, method_info, property_info, event_info, field_info, false);
		Utility.Warn("TopLevel.TestRunnable::__define_class end");
		return __defineclass_return;
	end,
};


require "cs2lua__lualib";
require "cs2lua__externenums";
require "cs2lua__interfaces";
require "toplevel__runnable";
settempmetatable(TopLevel.TestRunnable);
